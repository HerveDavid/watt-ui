{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAGrD,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;QA0DL,QAAG,GAAG,GAAG,CAAC;QAGV,UAAK,GAAG,kBAAkB,CAAC;IAuD7B,CAAC;IArDC,uDAAuD;IACvD,IAAY,eAAe;QACzB,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACxD,OAAO,CAAC,CAAC;QACX,CAAC;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC;IAED,8BAA8B;IAC9B,IAAY,UAAU;QACpB,OAAO,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IACjD,CAAC;IAED,gDAAgD;IAChD,IAAY,eAAe;QACzB,OAAO,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC;IACxC,CAAC;IAED,+BAA+B;IACtB,KAAK,CAAC,OAAsB;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAgB,CAAC;QACvF,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAEQ,IAAI;QACX,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAgB,CAAC;QACvF,SAAS,EAAE,IAAI,EAAE,CAAC;IACpB,CAAC;IAEQ,KAAK;QACZ,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAgB,CAAC;QACvF,SAAS,EAAE,KAAK,EAAE,CAAC;IACrB,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;yBAIU,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe;;yBAEhD,IAAI,CAAC,GAAG;sBACX,IAAI,CAAC,KAAK;;;;gCAIA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;mBACxD,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,GAAG;;;sCAGrC,IAAI,CAAC,KAAK;KAC3C,CAAC;IACJ,CAAC;;AAlHe,sBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmD3B,AAnDqB,CAmDpB;AAGF;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;8CACZ;AAGf;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4CACjB;AAGV;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;8CACA;AA7DhB,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CAoH3B","sourcesContent":["import { LitElement, html, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\n\n@customElement(\"watt-progress-bar\")\nexport class WattProgressBar extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      width: 100%;\n      font-family: var(--n-font-family);\n    }\n\n    .progress-container {\n      position: relative;\n      height: 4px;\n      background: var(--n-color-surface-lowered);\n      border-radius: var(--n-border-radius-pill);\n      overflow: hidden;\n    }\n\n    .progress-bar {\n      position: absolute;\n      height: 100%;\n      background: var(--n-color-accent);\n      border-radius: var(--n-border-radius-pill);\n      transition: width var(--n-transition-slowly);\n    }\n\n    /* Indeterminate animation */\n    @keyframes indeterminate {\n      0% {\n        left: -50%;\n        width: 50%;\n      }\n      100% {\n        left: 100%;\n        width: 50%;\n      }\n    }\n\n    .progress-bar.indeterminate {\n      animation: indeterminate 2s ease-in-out infinite;\n    }\n\n    /* Visually hidden label for screen readers */\n    .visually-hidden {\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0, 0, 0, 0);\n      white-space: nowrap;\n      border: 0;\n    }\n  `;\n\n  @property({ type: Number })\n  value?: number;\n\n  @property({ type: Number })\n  max = 100;\n\n  @property({ type: String })\n  label = \"Current progress\";\n\n  // Validate and normalize value to be between 0 and max\n  private get normalizedValue(): number {\n    if (typeof this.value !== 'number' || isNaN(this.value)) {\n      return 0;\n    }\n    return Math.min(Math.max(0, this.value), this.max);\n  }\n\n  // Convert value to percentage\n  private get percentage(): number {\n    return (this.normalizedValue / this.max) * 100;\n  }\n\n  // Check if progress bar should be indeterminate\n  private get isIndeterminate(): boolean {\n    return typeof this.value !== 'number';\n  }\n\n  // Methods required by the spec\n  override focus(options?: FocusOptions): void {\n    const container = this.shadowRoot?.querySelector('.progress-container') as HTMLElement;\n    container?.focus(options);\n  }\n\n  override blur(): void {\n    const container = this.shadowRoot?.querySelector('.progress-container') as HTMLElement;\n    container?.blur();\n  }\n\n  override click(): void {\n    const container = this.shadowRoot?.querySelector('.progress-container') as HTMLElement;\n    container?.click();\n  }\n\n  override render() {\n    return html`\n      <div\n        class=\"progress-container\"\n        role=\"progressbar\"\n        aria-valuenow=\"${this.isIndeterminate ? '' : this.normalizedValue}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"${this.max}\"\n        aria-label=\"${this.label}\"\n        tabindex=\"0\"\n      >\n        <div\n          class=\"progress-bar ${this.isIndeterminate ? 'indeterminate' : ''}\"\n          style=\"${this.isIndeterminate ? '' : `width: ${this.percentage}%`}\"\n        ></div>\n      </div>\n      <span class=\"visually-hidden\">${this.label}</span>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"watt-progress-bar\": WattProgressBar;\n  }\n}"]}